#!/usr/bin/env python3
import argparse
import sys
import csv

sys.path.append("./src")
import categories 
import dbmanager

class Expensetracker:
    def __init__(self):
        #Setup Database + Categories
        self.ctgs = categories.Categories()
        self.dbman = dbmanager.DBManager()
        self.dbman.create_table("transactions", [{"name" : "Date"        ,"type" : "varchar(255)", "constraint" : ""}, 
                                                 {"name" : "Description" ,"type" : "varchar(255)", "constraint" : ""},
                                                 {"name" : "Amount"      ,"type" : "varchar(255)", "constraint" : ""},
                                                 {"name" : "Category"    ,"type" : "varchar(255)", "constraint" : ""}])
    
    def parse_csv(self,filename):
        data = []
        with open(filename) as csvfile:
             reader = csv.DictReader(csvfile)
             try:
                 for row in reader:
                    print(row["Trans Date"],row["Description"],row["Amount"])
                    data.append({k: v for k, v in row.items() if k=="Trans Date" or k=="Description" or k=="Amount"})
                 
                 for d in data:
                     d["Date"] = d.pop("Trans Date")
                 return data
             except E:
                 print("Parsing Error")

    def load_file(self,filename):
        data  = self.parse_csv(filename)
        print(data)
        if data:
           for i,d in enumerate(data):
               cat = self.ctgs.categorize(d['Description'])
               data[i]['Category'] = cat
               self.dbman.insert("transactions",data[i])
    
    def tospreadsheet(self,filename):
        self.dbman.tospreadsheet("transactions",filename)


if __name__ == "__main__":
   et = Expensetracker()

   #do argument parsing
   parser = argparse.ArgumentParser(description='Record and Categorize Expenses')
   parser.add_argument('action', help='export, add, delete, cat')
   parser.add_argument('transaction', nargs='?', help='Object to add')
   parser.add_argument('--f')
   args = parser.parse_args()

   if   args.action == 'export':
       if args.f:
           et.tospreadsheet(args.f)
   elif args.action == 'add':
       if args.f:
           et.load_file(args.f)
   elif args.action == 'delete':
       pass
   elif args.action == 'cat':
       print(et.ctgs.categorize(args.transaction))
   else:
       print("Incorrect usage")
